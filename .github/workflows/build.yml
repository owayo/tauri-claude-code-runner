name: Build Tauri App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Ensure we have a clean working directory
          clean: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm install

      - name: Update version
        run: |
          npm run pretauri:build
          # Verify version was updated in all files
          VERSION=$(node -p "require('./package.json').version")
          echo "Updated version to: $VERSION"


      - name: Prepare for ad-hoc signing
        if: matrix.platform == 'macos-latest'
        run: |
          # Remove any existing code signature requirements
          echo "Preparing for ad-hoc signing..."

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable code signing completely
          APPLE_SIGNING_IDENTITY: '-'
          ENABLE_CODE_SIGNING: false
          # Force tauri-action to use our updated version
          TAURI_SKIP_DEVSERVER_CHECK: true
        with:
          args: ${{ matrix.args }}
          # Disable version update in tauri-action as we handle it ourselves
          includeUpdaterJson: false

      - name: Apply ad-hoc signature and remove quarantine
        if: matrix.platform == 'macos-latest'
        run: |
          # Apply ad-hoc signature
          find src-tauri/target -name "*.app" -type d | while read app; do
            echo "Ad-hoc signing: $app"
            # Remove existing signatures first
            codesign --remove-signature "$app" 2>/dev/null || true
            # Apply fresh ad-hoc signature
            codesign --force --deep --sign - "$app"
            # Remove quarantine attribute
            xattr -cr "$app"
          done
          
          # Process DMG files
          find src-tauri/target -name "*.dmg" -type f | while read dmg; do
            echo "Processing DMG: $dmg"
            # Create a temporary mount point
            MOUNT_POINT=$(mktemp -d)
            
            # Mount the DMG
            hdiutil attach "$dmg" -nobrowse -mountpoint "$MOUNT_POINT"
            
            # Find and sign the app inside
            find "$MOUNT_POINT" -name "*.app" -type d | while read app; do
              echo "Removing quarantine from app in DMG: $app"
              xattr -cr "$app"
            done
            
            # Unmount
            hdiutil detach "$MOUNT_POINT"
            
            # Remove quarantine from DMG itself
            xattr -cr "$dmg"
          done

      - name: Get updated version
        id: get_updated_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Build version: $VERSION"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}-${{ matrix.args == '--target universal-apple-darwin' && 'universal' || matrix.args == '--target x86_64-apple-darwin' && 'x86_64' || 'aarch64' }}
          path: |
            src-tauri/target/*/release/bundle/dmg/*.dmg
          retention-days: 7

      - name: Upload version info
        if: matrix.args == '--target universal-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: package.json
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Get version from artifact
        id: get_version
        run: |
          VERSION=$(node -p "require('./artifacts/version-info/package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/**/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
